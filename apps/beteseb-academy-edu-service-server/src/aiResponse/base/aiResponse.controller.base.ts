/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AiResponseService } from "../aiResponse.service";
import { AiResponseCreateInput } from "./AiResponseCreateInput";
import { AiResponse } from "./AiResponse";
import { AiResponseFindManyArgs } from "./AiResponseFindManyArgs";
import { AiResponseWhereUniqueInput } from "./AiResponseWhereUniqueInput";
import { AiResponseUpdateInput } from "./AiResponseUpdateInput";

export class AiResponseControllerBase {
  constructor(protected readonly service: AiResponseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AiResponse })
  async createAiResponse(
    @common.Body() data: AiResponseCreateInput
  ): Promise<AiResponse> {
    return await this.service.createAiResponse({
      data: data,
      select: {
        answer: true,
        createdAt: true,
        id: true,
        keywords: true,
        question: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AiResponse] })
  @ApiNestedQuery(AiResponseFindManyArgs)
  async aiResponses(@common.Req() request: Request): Promise<AiResponse[]> {
    const args = plainToClass(AiResponseFindManyArgs, request.query);
    return this.service.aiResponses({
      ...args,
      select: {
        answer: true,
        createdAt: true,
        id: true,
        keywords: true,
        question: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AiResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async aiResponse(
    @common.Param() params: AiResponseWhereUniqueInput
  ): Promise<AiResponse | null> {
    const result = await this.service.aiResponse({
      where: params,
      select: {
        answer: true,
        createdAt: true,
        id: true,
        keywords: true,
        question: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AiResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAiResponse(
    @common.Param() params: AiResponseWhereUniqueInput,
    @common.Body() data: AiResponseUpdateInput
  ): Promise<AiResponse | null> {
    try {
      return await this.service.updateAiResponse({
        where: params,
        data: data,
        select: {
          answer: true,
          createdAt: true,
          id: true,
          keywords: true,
          question: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AiResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAiResponse(
    @common.Param() params: AiResponseWhereUniqueInput
  ): Promise<AiResponse | null> {
    try {
      return await this.service.deleteAiResponse({
        where: params,
        select: {
          answer: true,
          createdAt: true,
          id: true,
          keywords: true,
          question: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
