/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AiResponse as PrismaAiResponse } from "@prisma/client";

export class AiResponseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AiResponseCountArgs, "select">
  ): Promise<number> {
    return this.prisma.aiResponse.count(args);
  }

  async aiResponses<T extends Prisma.AiResponseFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AiResponseFindManyArgs>
  ): Promise<PrismaAiResponse[]> {
    return this.prisma.aiResponse.findMany<Prisma.AiResponseFindManyArgs>(args);
  }
  async aiResponse<T extends Prisma.AiResponseFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AiResponseFindUniqueArgs>
  ): Promise<PrismaAiResponse | null> {
    return this.prisma.aiResponse.findUnique(args);
  }
  async createAiResponse<T extends Prisma.AiResponseCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AiResponseCreateArgs>
  ): Promise<PrismaAiResponse> {
    return this.prisma.aiResponse.create<T>(args);
  }
  async updateAiResponse<T extends Prisma.AiResponseUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AiResponseUpdateArgs>
  ): Promise<PrismaAiResponse> {
    return this.prisma.aiResponse.update<T>(args);
  }
  async deleteAiResponse<T extends Prisma.AiResponseDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AiResponseDeleteArgs>
  ): Promise<PrismaAiResponse> {
    return this.prisma.aiResponse.delete(args);
  }
}
