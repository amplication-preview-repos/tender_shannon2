/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AiResponse } from "./AiResponse";
import { AiResponseCountArgs } from "./AiResponseCountArgs";
import { AiResponseFindManyArgs } from "./AiResponseFindManyArgs";
import { AiResponseFindUniqueArgs } from "./AiResponseFindUniqueArgs";
import { CreateAiResponseArgs } from "./CreateAiResponseArgs";
import { UpdateAiResponseArgs } from "./UpdateAiResponseArgs";
import { DeleteAiResponseArgs } from "./DeleteAiResponseArgs";
import { AiResponseService } from "../aiResponse.service";
@graphql.Resolver(() => AiResponse)
export class AiResponseResolverBase {
  constructor(protected readonly service: AiResponseService) {}

  async _aiResponsesMeta(
    @graphql.Args() args: AiResponseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AiResponse])
  async aiResponses(
    @graphql.Args() args: AiResponseFindManyArgs
  ): Promise<AiResponse[]> {
    return this.service.aiResponses(args);
  }

  @graphql.Query(() => AiResponse, { nullable: true })
  async aiResponse(
    @graphql.Args() args: AiResponseFindUniqueArgs
  ): Promise<AiResponse | null> {
    const result = await this.service.aiResponse(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AiResponse)
  async createAiResponse(
    @graphql.Args() args: CreateAiResponseArgs
  ): Promise<AiResponse> {
    return await this.service.createAiResponse({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AiResponse)
  async updateAiResponse(
    @graphql.Args() args: UpdateAiResponseArgs
  ): Promise<AiResponse | null> {
    try {
      return await this.service.updateAiResponse({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AiResponse)
  async deleteAiResponse(
    @graphql.Args() args: DeleteAiResponseArgs
  ): Promise<AiResponse | null> {
    try {
      return await this.service.deleteAiResponse(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
