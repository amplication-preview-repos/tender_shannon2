/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Faq as PrismaFaq } from "@prisma/client";

export class FaqServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FaqCountArgs, "select">): Promise<number> {
    return this.prisma.faq.count(args);
  }

  async faqs<T extends Prisma.FaqFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FaqFindManyArgs>
  ): Promise<PrismaFaq[]> {
    return this.prisma.faq.findMany<Prisma.FaqFindManyArgs>(args);
  }
  async faq<T extends Prisma.FaqFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FaqFindUniqueArgs>
  ): Promise<PrismaFaq | null> {
    return this.prisma.faq.findUnique(args);
  }
  async createFaq<T extends Prisma.FaqCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FaqCreateArgs>
  ): Promise<PrismaFaq> {
    return this.prisma.faq.create<T>(args);
  }
  async updateFaq<T extends Prisma.FaqUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FaqUpdateArgs>
  ): Promise<PrismaFaq> {
    return this.prisma.faq.update<T>(args);
  }
  async deleteFaq<T extends Prisma.FaqDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FaqDeleteArgs>
  ): Promise<PrismaFaq> {
    return this.prisma.faq.delete(args);
  }
}
