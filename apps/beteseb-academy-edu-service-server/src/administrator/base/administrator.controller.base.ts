/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AdministratorService } from "../administrator.service";
import { AdministratorCreateInput } from "./AdministratorCreateInput";
import { Administrator } from "./Administrator";
import { AdministratorFindManyArgs } from "./AdministratorFindManyArgs";
import { AdministratorWhereUniqueInput } from "./AdministratorWhereUniqueInput";
import { AdministratorUpdateInput } from "./AdministratorUpdateInput";

export class AdministratorControllerBase {
  constructor(protected readonly service: AdministratorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Administrator })
  async createAdministrator(
    @common.Body() data: AdministratorCreateInput
  ): Promise<Administrator> {
    return await this.service.createAdministrator({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Administrator] })
  @ApiNestedQuery(AdministratorFindManyArgs)
  async administrators(
    @common.Req() request: Request
  ): Promise<Administrator[]> {
    const args = plainToClass(AdministratorFindManyArgs, request.query);
    return this.service.administrators({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Administrator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async administrator(
    @common.Param() params: AdministratorWhereUniqueInput
  ): Promise<Administrator | null> {
    const result = await this.service.administrator({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Administrator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAdministrator(
    @common.Param() params: AdministratorWhereUniqueInput,
    @common.Body() data: AdministratorUpdateInput
  ): Promise<Administrator | null> {
    try {
      return await this.service.updateAdministrator({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Administrator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAdministrator(
    @common.Param() params: AdministratorWhereUniqueInput
  ): Promise<Administrator | null> {
    try {
      return await this.service.deleteAdministrator({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
