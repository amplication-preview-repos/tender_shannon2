/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PerformanceAnalyticsService } from "../performanceAnalytics.service";
import { PerformanceAnalyticsCreateInput } from "./PerformanceAnalyticsCreateInput";
import { PerformanceAnalytics } from "./PerformanceAnalytics";
import { PerformanceAnalyticsFindManyArgs } from "./PerformanceAnalyticsFindManyArgs";
import { PerformanceAnalyticsWhereUniqueInput } from "./PerformanceAnalyticsWhereUniqueInput";
import { PerformanceAnalyticsUpdateInput } from "./PerformanceAnalyticsUpdateInput";

export class PerformanceAnalyticsControllerBase {
  constructor(protected readonly service: PerformanceAnalyticsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PerformanceAnalytics })
  async createPerformanceAnalytics(
    @common.Body() data: PerformanceAnalyticsCreateInput
  ): Promise<PerformanceAnalytics> {
    return await this.service.createPerformanceAnalytics({
      data: {
        ...data,

        student: data.student
          ? {
              connect: data.student,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        date: true,
        grade: true,
        id: true,

        student: {
          select: {
            id: true,
          },
        },

        subject: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PerformanceAnalytics] })
  @ApiNestedQuery(PerformanceAnalyticsFindManyArgs)
  async performanceAnalyticsItems(
    @common.Req() request: Request
  ): Promise<PerformanceAnalytics[]> {
    const args = plainToClass(PerformanceAnalyticsFindManyArgs, request.query);
    return this.service.performanceAnalyticsItems({
      ...args,
      select: {
        createdAt: true,
        date: true,
        grade: true,
        id: true,

        student: {
          select: {
            id: true,
          },
        },

        subject: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PerformanceAnalytics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async performanceAnalytics(
    @common.Param() params: PerformanceAnalyticsWhereUniqueInput
  ): Promise<PerformanceAnalytics | null> {
    const result = await this.service.performanceAnalytics({
      where: params,
      select: {
        createdAt: true,
        date: true,
        grade: true,
        id: true,

        student: {
          select: {
            id: true,
          },
        },

        subject: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PerformanceAnalytics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePerformanceAnalytics(
    @common.Param() params: PerformanceAnalyticsWhereUniqueInput,
    @common.Body() data: PerformanceAnalyticsUpdateInput
  ): Promise<PerformanceAnalytics | null> {
    try {
      return await this.service.updatePerformanceAnalytics({
        where: params,
        data: {
          ...data,

          student: data.student
            ? {
                connect: data.student,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          date: true,
          grade: true,
          id: true,

          student: {
            select: {
              id: true,
            },
          },

          subject: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PerformanceAnalytics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePerformanceAnalytics(
    @common.Param() params: PerformanceAnalyticsWhereUniqueInput
  ): Promise<PerformanceAnalytics | null> {
    try {
      return await this.service.deletePerformanceAnalytics({
        where: params,
        select: {
          createdAt: true,
          date: true,
          grade: true,
          id: true,

          student: {
            select: {
              id: true,
            },
          },

          subject: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
