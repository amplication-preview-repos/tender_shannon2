/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PerformanceAnalytics as PrismaPerformanceAnalytics,
  Student as PrismaStudent,
} from "@prisma/client";

export class PerformanceAnalyticsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PerformanceAnalyticsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.performanceAnalytics.count(args);
  }

  async performanceAnalyticsItems<
    T extends Prisma.PerformanceAnalyticsFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.PerformanceAnalyticsFindManyArgs>
  ): Promise<PrismaPerformanceAnalytics[]> {
    return this.prisma.performanceAnalytics.findMany<Prisma.PerformanceAnalyticsFindManyArgs>(
      args
    );
  }
  async performanceAnalytics<
    T extends Prisma.PerformanceAnalyticsFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.PerformanceAnalyticsFindUniqueArgs>
  ): Promise<PrismaPerformanceAnalytics | null> {
    return this.prisma.performanceAnalytics.findUnique(args);
  }
  async createPerformanceAnalytics<
    T extends Prisma.PerformanceAnalyticsCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.PerformanceAnalyticsCreateArgs>
  ): Promise<PrismaPerformanceAnalytics> {
    return this.prisma.performanceAnalytics.create<T>(args);
  }
  async updatePerformanceAnalytics<
    T extends Prisma.PerformanceAnalyticsUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.PerformanceAnalyticsUpdateArgs>
  ): Promise<PrismaPerformanceAnalytics> {
    return this.prisma.performanceAnalytics.update<T>(args);
  }
  async deletePerformanceAnalytics<
    T extends Prisma.PerformanceAnalyticsDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.PerformanceAnalyticsDeleteArgs>
  ): Promise<PrismaPerformanceAnalytics> {
    return this.prisma.performanceAnalytics.delete(args);
  }

  async getStudent(parentId: string): Promise<PrismaStudent | null> {
    return this.prisma.performanceAnalytics
      .findUnique({
        where: { id: parentId },
      })
      .student();
  }
}
