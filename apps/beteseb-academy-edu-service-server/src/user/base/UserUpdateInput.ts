/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AdministratorUpdateManyWithoutUsersInput } from "./AdministratorUpdateManyWithoutUsersInput";
import {
  ValidateNested,
  IsOptional,
  IsString,
  IsBoolean,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { FeedbackUpdateManyWithoutUsersInput } from "./FeedbackUpdateManyWithoutUsersInput";
import { ParentUpdateManyWithoutUsersInput } from "./ParentUpdateManyWithoutUsersInput";
import { EnumUserRole } from "./EnumUserRole";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { StudentUpdateManyWithoutUsersInput } from "./StudentUpdateManyWithoutUsersInput";
import { TeacherUpdateManyWithoutUsersInput } from "./TeacherUpdateManyWithoutUsersInput";

@InputType()
class UserUpdateInput {
  @ApiProperty({
    required: false,
    type: () => AdministratorUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => AdministratorUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => AdministratorUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  administrators?: AdministratorUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string | null;

  @ApiProperty({
    required: false,
    type: () => FeedbackUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => FeedbackUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => FeedbackUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  feedbacks?: FeedbackUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isActive?: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName?: string | null;

  @ApiProperty({
    required: false,
    type: () => ParentUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ParentUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ParentUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  parents?: ParentUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  password?: string;

  @ApiProperty({
    required: false,
    enum: EnumUserRole,
  })
  @IsEnum(EnumUserRole)
  @IsOptional()
  @Field(() => EnumUserRole, {
    nullable: true,
  })
  role?: "Option1" | null;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  roles?: InputJsonValue;

  @ApiProperty({
    required: false,
    type: () => StudentUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => StudentUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => StudentUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  students?: StudentUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => TeacherUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => TeacherUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => TeacherUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  teachers?: TeacherUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  username?: string;
}

export { UserUpdateInput as UserUpdateInput };
