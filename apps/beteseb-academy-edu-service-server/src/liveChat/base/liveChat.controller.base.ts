/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LiveChatService } from "../liveChat.service";
import { LiveChatCreateInput } from "./LiveChatCreateInput";
import { LiveChat } from "./LiveChat";
import { LiveChatFindManyArgs } from "./LiveChatFindManyArgs";
import { LiveChatWhereUniqueInput } from "./LiveChatWhereUniqueInput";
import { LiveChatUpdateInput } from "./LiveChatUpdateInput";

export class LiveChatControllerBase {
  constructor(protected readonly service: LiveChatService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LiveChat })
  async createLiveChat(
    @common.Body() data: LiveChatCreateInput
  ): Promise<LiveChat> {
    return await this.service.createLiveChat({
      data: data,
      select: {
        admin: true,
        createdAt: true,
        id: true,
        isMonitored: true,
        participants: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LiveChat] })
  @ApiNestedQuery(LiveChatFindManyArgs)
  async liveChats(@common.Req() request: Request): Promise<LiveChat[]> {
    const args = plainToClass(LiveChatFindManyArgs, request.query);
    return this.service.liveChats({
      ...args,
      select: {
        admin: true,
        createdAt: true,
        id: true,
        isMonitored: true,
        participants: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LiveChat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async liveChat(
    @common.Param() params: LiveChatWhereUniqueInput
  ): Promise<LiveChat | null> {
    const result = await this.service.liveChat({
      where: params,
      select: {
        admin: true,
        createdAt: true,
        id: true,
        isMonitored: true,
        participants: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LiveChat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLiveChat(
    @common.Param() params: LiveChatWhereUniqueInput,
    @common.Body() data: LiveChatUpdateInput
  ): Promise<LiveChat | null> {
    try {
      return await this.service.updateLiveChat({
        where: params,
        data: data,
        select: {
          admin: true,
          createdAt: true,
          id: true,
          isMonitored: true,
          participants: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LiveChat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLiveChat(
    @common.Param() params: LiveChatWhereUniqueInput
  ): Promise<LiveChat | null> {
    try {
      return await this.service.deleteLiveChat({
        where: params,
        select: {
          admin: true,
          createdAt: true,
          id: true,
          isMonitored: true,
          participants: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
