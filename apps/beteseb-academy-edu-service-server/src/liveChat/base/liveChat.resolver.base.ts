/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LiveChat } from "./LiveChat";
import { LiveChatCountArgs } from "./LiveChatCountArgs";
import { LiveChatFindManyArgs } from "./LiveChatFindManyArgs";
import { LiveChatFindUniqueArgs } from "./LiveChatFindUniqueArgs";
import { CreateLiveChatArgs } from "./CreateLiveChatArgs";
import { UpdateLiveChatArgs } from "./UpdateLiveChatArgs";
import { DeleteLiveChatArgs } from "./DeleteLiveChatArgs";
import { LiveChatService } from "../liveChat.service";
@graphql.Resolver(() => LiveChat)
export class LiveChatResolverBase {
  constructor(protected readonly service: LiveChatService) {}

  async _liveChatsMeta(
    @graphql.Args() args: LiveChatCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LiveChat])
  async liveChats(
    @graphql.Args() args: LiveChatFindManyArgs
  ): Promise<LiveChat[]> {
    return this.service.liveChats(args);
  }

  @graphql.Query(() => LiveChat, { nullable: true })
  async liveChat(
    @graphql.Args() args: LiveChatFindUniqueArgs
  ): Promise<LiveChat | null> {
    const result = await this.service.liveChat(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LiveChat)
  async createLiveChat(
    @graphql.Args() args: CreateLiveChatArgs
  ): Promise<LiveChat> {
    return await this.service.createLiveChat({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LiveChat)
  async updateLiveChat(
    @graphql.Args() args: UpdateLiveChatArgs
  ): Promise<LiveChat | null> {
    try {
      return await this.service.updateLiveChat({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LiveChat)
  async deleteLiveChat(
    @graphql.Args() args: DeleteLiveChatArgs
  ): Promise<LiveChat | null> {
    try {
      return await this.service.deleteLiveChat(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
